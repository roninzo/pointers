//go:build go1.18
// +build go1.18

package pointers

import (
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
)

func TestNew(t *testing.T) {
	f := "New"
	assert.Nil(t, New(false, Nilify), testName(f, false))
	assert.Equal(t, false, *New(false), testName(f, false))
	assert.Equal(t, true, *New(true), testName(f, true))
	assert.Nil(t, New(byte(0), Nilify), testName(f, byte(0)))
	assert.Equal(t, byte(0), *New(byte(0)), testName(f, byte(0)))
	assert.Equal(t, byte(10), *New(byte(10)), testName(f, byte(10)))
	assert.Nil(t, New(int(0), Nilify), testName(f, int(0)))
	assert.Equal(t, int(-7), *New(int(-7)), testName(f, int(-7)))
	assert.Equal(t, int(0), *New(int(0)), testName(f, int(0)))
	assert.Equal(t, int(10), *New(int(10)), testName(f, int(10)))
	assert.Nil(t, New(int8(0), Nilify), testName(f, int8(0)))
	assert.Equal(t, int8(-7), *New(int8(-7)), testName(f, int8(-7)))
	assert.Equal(t, int8(0), *New(int8(0)), testName(f, int8(0)))
	assert.Equal(t, int8(10), *New(int8(10)), testName(f, int8(10)))
	assert.Nil(t, New(int16(0), Nilify), testName(f, int16(0)))
	assert.Equal(t, int16(-7), *New(int16(-7)), testName(f, int16(-7)))
	assert.Equal(t, int16(0), *New(int16(0)), testName(f, int16(0)))
	assert.Equal(t, int16(10), *New(int16(10)), testName(f, int16(10)))
	assert.Nil(t, New(int32(0), Nilify), testName(f, int32(0)))
	assert.Equal(t, int32(-7), *New(int32(-7)), testName(f, int32(-7)))
	assert.Equal(t, int32(0), *New(int32(0)), testName(f, int32(0)))
	assert.Equal(t, int32(10), *New(int32(10)), testName(f, int32(10)))
	assert.Nil(t, New(int64(0), Nilify), testName(f, int64(0)))
	assert.Equal(t, int64(-7), *New(int64(-7)), testName(f, int64(-7)))
	assert.Equal(t, int64(0), *New(int64(0)), testName(f, int64(0)))
	assert.Equal(t, int64(10), *New(int64(10)), testName(f, int64(10)))
	assert.Nil(t, New(uint(0), Nilify), testName(f, uint(0)))
	assert.Equal(t, uint(0), *New(uint(0)), testName(f, uint(0)))
	assert.Equal(t, uint(10), *New(uint(10)), testName(f, uint(10)))
	assert.Nil(t, New(uint8(0), Nilify), testName(f, uint8(0)))
	assert.Equal(t, uint8(0), *New(uint8(0)), testName(f, uint8(0)))
	assert.Equal(t, uint8(10), *New(uint8(10)), testName(f, uint8(10)))
	assert.Nil(t, New(uint16(0), Nilify), testName(f, uint16(0)))
	assert.Equal(t, uint16(0), *New(uint16(0)), testName(f, uint16(0)))
	assert.Equal(t, uint16(10), *New(uint16(10)), testName(f, uint16(10)))
	assert.Nil(t, New(uint32(0), Nilify), testName(f, uint32(0)))
	assert.Equal(t, uint32(0), *New(uint32(0)), testName(f, uint32(0)))
	assert.Equal(t, uint32(10), *New(uint32(10)), testName(f, uint32(10)))
	assert.Nil(t, New(uint64(0), Nilify), testName(f, uint64(0)))
	assert.Equal(t, uint64(0), *New(uint64(0)), testName(f, uint64(0)))
	assert.Equal(t, uint64(10), *New(uint64(10)), testName(f, uint64(10)))
	assert.Nil(t, New(uintptr(0), Nilify), testName(f, uintptr(0)))
	assert.Equal(t, uintptr(0), *New(uintptr(0)), testName(f, uintptr(0)))
	assert.Equal(t, uintptr(10), *New(uintptr(10)), testName(f, uintptr(10)))
	assert.Nil(t, New(float32(0), Nilify), testName(f, float32(0)))
	assert.Equal(t, float32(-9.50), *New(float32(-9.50)), testName(f, float32(-9.50)))
	assert.Equal(t, float32(-1), *New(float32(-1)), testName(f, float32(-1)))
	assert.Equal(t, float32(0), *New(float32(0)), testName(f, float32(0)))
	assert.Equal(t, float32(4), *New(float32(4)), testName(f, float32(4)))
	assert.Equal(t, float32(6.05), *New(float32(6.05)), testName(f, float32(6.05)))
	assert.Nil(t, New(float64(0), Nilify), testName(f, float64(0)))
	assert.Equal(t, float64(-9.50), *New(float64(-9.50)), testName(f, float64(-9.50)))
	assert.Equal(t, float64(-1), *New(float64(-1)), testName(f, float64(-1)))
	assert.Equal(t, float64(0), *New(float64(0)), testName(f, float64(0)))
	assert.Equal(t, float64(4), *New(float64(4)), testName(f, float64(4)))
	assert.Equal(t, float64(6.05), *New(float64(6.05)), testName(f, float64(6.05)))
	assert.Nil(t, New(complex64(0), Nilify), testName(f, complex64(0)))
	assert.Equal(t, complex64(-9), *New(complex64(-9)), testName(f, complex64(-9)))
	assert.Equal(t, complex64(0), *New(complex64(0)), testName(f, complex64(0)))
	assert.Equal(t, complex64(7), *New(complex64(7)), testName(f, complex64(7)))
	assert.Nil(t, New(complex128(0), Nilify), testName(f, complex128(0)))
	assert.Equal(t, complex128(-9), *New(complex128(-9)), testName(f, complex128(-9)))
	assert.Equal(t, complex128(0), *New(complex128(0)), testName(f, complex128(0)))
	assert.Equal(t, complex128(7), *New(complex128(7)), testName(f, complex128(7)))
	assert.Nil(t, New("", Nilify), testName(f, ""))
	assert.Equal(t, "", *New(""), testName(f, ""))
	assert.Equal(t, "foo", *New("foo"), testName(f, "foo"))
	assert.Equal(t, "bar", *New("bar"), testName(f, "bar"))
	assert.Nil(t, New(rune(0), Nilify), testName(f, rune(0)))
	assert.Equal(t, rune(0), *New(rune(0)), testName(f, rune(0)))
	assert.Equal(t, rune(9), *New(rune(9)), testName(f, rune(9)))
	assert.Equal(t, rune(39), *New(rune(39)), testName(f, rune(39)))
	assert.Nil(t, New(time.Time{}, Nilify), testName(f, time.Time{}))
	assert.Equal(t, time.Time{}, *New(time.Time{}), testName(f, time.Time{}))
	assert.Equal(t, time.Unix(3242345, 055), *New(time.Unix(3242345, 055)), testName(f, time.Unix(3242345, 055)))
	assert.Nil(t, New(time.Duration(0), Nilify), testName(f, time.Duration(0)))
	assert.Equal(t, -5*time.Minute, *New(-5 * time.Minute), testName(f, -5*time.Minute))
	assert.Equal(t, time.Duration(0), *New(time.Duration(0)), testName(f, time.Duration(0)))
	assert.Equal(t, 2*time.Hour, *New(2 * time.Hour), testName(f, 2*time.Hour))
}
